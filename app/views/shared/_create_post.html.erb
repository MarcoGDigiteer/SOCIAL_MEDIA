<div id="createPostModal" class="modal">
  <div class="modal-content">
    <h2>Create a Post</h2>
    <input id="postTitle" type="text" placeholder="Title" class="input-title" oninput="updateCharCount()" />
    <textarea id="postContent" placeholder="Write something here..." oninput="updateCharCount()"></textarea>

    <div class="modal-actions">
      <button onclick="closeCreatePost()">Cancel</button>
      <span id="titleCharCount" class="char-count">0/255</span>
      <span id="contentCharCount" class="char-count">0/1500</span>
      <button id="postButton" onclick="submitPost()">Post</button>
    </div>
  </div>
</div>

<style>
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-content {
    background: white;
    padding: 20px;
    border-radius: 12px;
    width: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .input-title,
  textarea {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
  }

  textarea {
    height: 100px;
    resize: none;
  }

  .char-count {
    font-size: 14px;
    color: #2398bd;
    font-family: inherit;
    margin: 0 10px;
  }

  .char-count.exceeded {
    color: red;
  }

  .modal-actions {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-actions button {
    background: #007bff;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
  }

  .modal-actions button:first-child {
    background: #ccc;
  }

  .modal-actions button:hover {
    opacity: 0.9;
  }

  .modal-actions button:disabled {
    background: gray;
    cursor: not-allowed;
  }

  .char-count {
    margin: 0 10px;
  }
</style>

<script>
    function submitPost() {
        let title = document.getElementById("postTitle").value.trim();
        let content = document.getElementById("postContent").value.trim();

        if (!title || !content) {
        alert("Title and/or content cannot be empty!");
        return;
        }

        fetch("/posts", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content"),
        },
        body: JSON.stringify({ post: { title: title, content: content } }) // Wrap inside `post`
        })

        .then(response => response.json())
        .then(data => {
            if (data.success) {
                closeCreatePost();
                // Optionally, update the UI dynamically instead of reloading
                location.reload(); 
            } else {
                document.getElementById("errorMessage").textContent = data.errors.join(", ");
            }
        })
        .catch(error => console.error("Error:", error));
    }

  function openCreatePost() {
    document.getElementById("createPostModal").style.display = "flex";
  }

  function closeCreatePost() {
    document.getElementById("createPostModal").style.display = "none";
  }

  function updateCharCount() {
    let title = document.getElementById("postTitle").value;
    let content = document.getElementById("postContent").value;
    let titleCount = title.length;
    let contentCount = content.length;
    let titleCharCount = document.getElementById("titleCharCount");
    let contentCharCount = document.getElementById("contentCharCount");
    let postButton = document.getElementById("postButton");

    titleCharCount.textContent = `${titleCount}/255`;
    contentCharCount.textContent = `${contentCount}/1500`;

    titleCharCount.classList.toggle("exceeded", titleCount > 255);
    contentCharCount.classList.toggle("exceeded", contentCount > 1500);

    postButton.disabled = titleCount > 255 || contentCount > 1500;
  }
  
</script>
